const { camelCase } = require('lodash');
const { categoryId, escapeKey, mkdir, rulesIn, writeFile } = require('./utils');

/** @typedef {import('./utils').RuleMeta} RuleMeta */

/**
 * @param {string} category
 * @param {RuleMeta[]} rules
 */
const createMeta = async (category, rules) => {
    const id = categoryId(category);
    const camelCaseId = camelCase(id);
    const rulesIds = rules.map((rule) => {
        return `'${rule.id}'`;
    });
    const properties = rules.map((rule) => {
        return `
                ${escapeKey(rule.id)}: { enum: ['off', 'warning', 'error'], type: 'string' }`;
    });

    const content = `// autogenerated by scripts/create/create-metas.js
import { Category } from '@hint/utils-types';
import { HintScope } from 'hint/dist/src/lib/enums/hint-scope';
import { HintMetadata } from 'hint/dist/src/lib/types';

import { getMessage } from '../i18n.import';

const meta: HintMetadata = {
    docs: {
        category: Category.accessibility,
        description: getMessage('${camelCaseId}_description', 'en'),
        name: getMessage('${camelCaseId}_name', 'en')
    },
    /* istanbul ignore next */
    getDescription(language: string) {
        return getMessage('${camelCaseId}_description', language);
    },
    /* istanbul ignore next */
    getName(language: string) {
        return getMessage('${camelCaseId}_name', language);
    },
    id: 'axe/${id}',
    schema: [
        {
            additionalProperties: false,
            properties: {${properties.join(',')}
            }
        },
        {
            items: {
                enum: [${rulesIds.join(', ')}],
                type: 'string'
            },
            typeof: 'array',
            uniqueItems: true
        }
    ],
    scope: HintScope.any
};

export default meta;
`;

    await writeFile(`src/meta/${id}.ts`, content);
};

/**
 * Generate a `./meta/*.ts` file containing the metadata for each
 * sub-hint. Then generate a `meta.ts` file referencing the metadata
 * for all sub-hints.
 *
 * @param {string[]} categories
 * @param {RuleMeta[]} rules
 */
const createMetas = async (categories, rules) => {
    await mkdir('src/meta');

    for (const category of categories) {
        createMeta(category, rulesIn(category, rules));
    }

    const metas = categories.map((category) => {
        const id = categoryId(category);

        return `    ${escapeKey(id)}: require('./meta/${id}')`;
    });

    const content = `// autogenerated by scripts/create/create-metas.js
module.exports = {
${metas.join(',\n')}
};
`;

    await writeFile('src/meta.ts', content);
};

module.exports = { createMetas };
