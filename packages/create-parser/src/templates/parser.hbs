import { Event, {{#each eventTypes}}{{this}}, {{/each}}Parser } from 'hint/dist/src/lib/types';
import { Engine } from 'hint/dist/src/lib/engine';


/*
 * Extend `Event` to add information neeeded by hints.
 * i.e.
 *    type ManifestParsed = Event & {
 *        sourceCode: any;
 *    }
 */
export type {{capitalizedName}}Parsed = Event & {
    // Extend `Event` to add the information you will need in your hints.
};

/*
 * Extend `Events` to declare new events emitted by this parser.
 */
export type {{capitalizedName}}Events = Events & {
    'parse::end::{{../normalizedName}}': {{capitalizedName}}Parsed;
    'parse::start::{{../normalizedName}}': Event;
};

export default class {{capitalizedName}} extends Parser {
    public constructor(engine: Engine) {
        super(engine);

{{#each events}}
        engine.on('{{event}}', this.{{handler}}.bind(this));
{{/each}}
    }

{{#each events}}
    private async {{handler}}({{varName}}: {{type}}) {

        await this.engine.emitAsync('parse::start::{{../normalizedName}}', { {{varName}}.resource });

        // TODO: Parse the resource.

        const eventData: {{capitalizedName}}Parsed = {{varName}};

        await this.engine.emitAsync('parse::end::{{../normalizedName}}', eventData);
    }
{{/each}}
}
